Beginning
Intro
What is programming - CPUs, asm
Python fizzbuzz
Python flask
quadratic formula (c + python)

Have enough of
osi model
shell - ls, >, sed, grep, awk, env var, pipe
programming language taxonomy
Python bytecode
nosql
json
binary files (png parsing)
sockets
pointers
rust, go or other
regexes
other languages: java, c#, lisp, etc
oop
git - branches, remotes, checkout
security
diff
data structures
configuring the environment - .vimrc, .gitconfig, .bashrc etc.
useful python - len, list comp, lambda
file hashes, sym links - on pure
assert
vm's
web server

May have enough of
What is clean code
editors + macros
reading open source code
algorithms - sort, binary search, dfs, bfs, np completeness, o notation
jupyter + pandas + plotly
np complete (knapsack)
dynamic programming
structs
future reading: c prog, cpp, sw design (esr), etc.

May not need
bootstrap
opengl shaders
stack overflow profile
angular
gpgpu
machine learning
ffi
timestamp sort
online shop - sql, json
http server revisited - sw design in c
esr
crawler - regexes + concurrent programming + bfs + tagsoup
processes + virtual memory?

Missing
profiling
chat web site
unit testing - bus schedule?
data visualisation - bus schedule?
processes - unit testing, code reviews, q&a, ci

Will have
parallel programming - threads, mutexes
utf-8
btree
ring buffer
conclusion with text on desktop+mobile apps
cron
env variables
heap
open source licenses

Exercises
graphics programming
device drivers

Projects done
quadratic formula - generate text data, generate json, read json, plot using plotly, store to nosql, show stats
guess number - js, binary search
web server - sockets, pointers, osi
sudoku - dfs, recursion, classes, propagate + search
bus schedule - software design, strong+static languages, more algorithms, make, kiss (wiki/unix_philosophy)
dot parsing  - regexes, fsm, proper parser, backus naur, graphs, bfs, topological sort
print return receipt - scan code, pdf, sql
tech behind the book
