#!/usr/bin/env python2

# input format: generated by gps.py:
# <route nr> <start nr> <gps x> <gps y> <flag already passed or not>

# output format: as by sched.py:
# several rows of:
# <route nr> <start nr> <hr> <min> 0
# for all that have passed:
# <route nr> <start nr> 0 0 2

import sys
import math

def dist(a, b):
    return math.sqrt(((a[0] - b[0]) ** 2) + ((a[1] - b[1]) ** 2))

def parse_historical_data(filename):
    ret = list()
    with open(filename, 'r') as f:
        for line in f:
            l = line.split(' ')
            routenr = int(l[0])
            t = float(l[1])
            px = float(l[2])
            py = float(l[3])
            ret.append((routenr, t, px, py))
    return ret

def get_running_buses(filename, hist):
    buses = list()
    passed_buses = list()
    with open(filename, 'r') as f:
        for line in f:
            l = line.split(' ')[:5]
            routenr = int(l[0])
            startnr = int(l[1])
            gx = float(l[2])
            gy = float(l[3])
            passed = l[4] == '2'

            if passed:
                passed_buses.append((routenr, startnr))
            else:
                times = list()
                for bus_routenr, t, px, py, in hist:
                    if bus_routenr != routenr:
                        continue
                    d = dist((px, py), (gx, gy))
                    if d < 100.0:
                        times.append(t)
                if times:
                    avgtime = sum(times) / float(len(times))
                    this_bus = (routenr, startnr, avgtime)
                    buses.append(this_bus)

    buses.sort(key=lambda (r, s, t): t)
    return buses, passed_buses

def main():
    # parse arguments
    time = sys.argv[1]
    now_hr, now_minute = [int(n) for n in time.split(':')]
    current_gps = sys.argv[2]
    historical_gps = sys.argv[3]

    # parse the data
    historical_data = parse_historical_data(historical_gps)
    running_buses, passed_buses = get_running_buses(current_gps, historical_data)

    # output
    for routenr, startnr, time in running_buses[:20]:
        h = now_hr
        m = int(now_minute + time)
        while m >= 60:
            m -= 60
            h += 1
        if h > 23:
            h -= 24
        print routenr, startnr, h, m, 0

    for routenr, startnr in passed_buses:
        print routenr, startnr, 0, 0, 2

if __name__ == '__main__':
    main()
